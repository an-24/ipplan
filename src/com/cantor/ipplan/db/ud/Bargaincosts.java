package com.cantor.ipplan.db.ud;

// Generated 12.04.2013 19:58:46 by Hibernate Tools 3.4.0.CR1

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.Hibernate;

import com.cantor.ipplan.core.DataBridge;
import com.cantor.ipplan.shared.BargaincostsWrapper;

/**
 * Bargaincosts generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@Table(name = "BARGAINCOSTS")
public class Bargaincosts implements java.io.Serializable, DataBridge<BargaincostsWrapper> {

	private int bargaincostsId;
	private Costs costs;
	private Bargain bargain;
	private int bargaincostsValue;
	private int bargaincostsPayment;
	private String bargaincostsNote;

	public Bargaincosts() {
	}

	public Bargaincosts(int bargaincostsId, Costs costs, Bargain bargain,
			int bargaincostsValue) {
		this.bargaincostsId = bargaincostsId;
		this.costs = costs;
		this.bargain = bargain;
		this.bargaincostsValue = bargaincostsValue;
	}

	public Bargaincosts(int bargaincostsId, Costs costs, Bargain bargain,
			int bargaincostsValue, Integer bargaincostsPayment,
			String bargaincostsNote) {
		this.bargaincostsId = bargaincostsId;
		this.costs = costs;
		this.bargain = bargain;
		this.bargaincostsValue = bargaincostsValue;
		this.bargaincostsPayment = bargaincostsPayment;
		this.bargaincostsNote = bargaincostsNote;
	}

	@Id
	@javax.persistence.SequenceGenerator(name="newRec", sequenceName="NEWRECORDID")	
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "newRec")
	@Column(name = "BARGAINCOSTS_ID", unique = true, nullable = false)
	public int getBargaincostsId() {
		return this.bargaincostsId;
	}

	public void setBargaincostsId(int bargaincostsId) {
		this.bargaincostsId = bargaincostsId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "COSTS_ID", nullable = false)
	public Costs getCosts() {
		return this.costs;
	}

	public void setCosts(Costs costs) {
		this.costs = costs;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "BARGAIN_ID", nullable = false)
	public Bargain getBargain() {
		return this.bargain;
	}

	public void setBargain(Bargain bargain) {
		this.bargain = bargain;
	}

	@Column(name = "BARGAINCOSTS_VALUE", nullable = false)
	public int getBargaincostsValue() {
		return this.bargaincostsValue;
	}

	public void setBargaincostsValue(int bargaincostsValue) {
		this.bargaincostsValue = bargaincostsValue;
	}

	@Column(name = "BARGAINCOSTS_PAYMENT")
	public int getBargaincostsPayment() {
		return this.bargaincostsPayment;
	}

	public void setBargaincostsPayment(int bargaincostsPayment) {
		this.bargaincostsPayment = bargaincostsPayment;
	}

	@Column(name = "BARGAINCOSTS_NOTE", length = 120)
	public String getBargaincostsNote() {
		return this.bargaincostsNote;
	}

	public void setBargaincostsNote(String bargaincostsNote) {
		this.bargaincostsNote = bargaincostsNote;
	}

	@Override
	public BargaincostsWrapper toClient() {
		BargaincostsWrapper bcw = new BargaincostsWrapper();
		bcw.bargaincostsId = bargaincostsId;
		bcw.bargaincostsValue = bargaincostsValue;
		bcw.bargaincostsPayment = bargaincostsPayment;
		bcw.bargaincostsNote = bargaincostsNote;
		bcw.cost = costs.toClient();
		//Bargain bargain;  not! 
		return bcw;
	}

	@Override
	public void fromClient(BargaincostsWrapper data) {
		bargaincostsId = data.bargaincostsId;
		bargaincostsValue = data.bargaincostsValue;
		bargaincostsPayment = data.bargaincostsPayment;
		bargaincostsNote = data.bargaincostsNote;
		if(costs==null) costs = new Costs();
		costs.fromClient(data.cost);
		//Bargain bargain;  not! 
	}

	@Override
	public void fetch(boolean deep) {
		Hibernate.initialize(costs);
		getCosts().fetch(deep);
	}
	
	public boolean equals(Bargaincosts source) {
		if(source.getCosts().getCostsId()!=costs.getCostsId()) return false;
		//private Bargain bargain;
		if(source.bargaincostsValue!=bargaincostsValue) return false;
		if(source.bargaincostsPayment!=bargaincostsPayment) return false;
		if(!str(source.bargaincostsNote).equals(str(bargaincostsNote))) return false;
		return true;
		
	}
	
	private String str(String s) {
		return s==null?"":s;
	}

}
